/*
    Theory MUD File signature verification
    Author: Antognarelli Luca
    AA: 2024/2025
*/

theory MUD_File_signature
/*
    Legenda:
        M: MUD Manager
        S: MUD File Server
*/
begin

/*
    Import signing theory models
    https://github.com/tamarin-prover/tamarin-prover/blob/develop/examples/Tutorial.spthy
*/
builtins: signing

/*Rule that models the registration of a public/private key pair for an entity A */
rule Register_pk:
    [ Fr(~ltkA) ] //ltkA is a private, unique, and freshly generated term
    -->
    [ !Ltk($A, ~ltkA), !Pk($A, pk(~ltkA)), //Persistent fact (!) for: asserts that A owns the private key ltkA & asserts that public key corresponding to lrkA is associated with A
        Out(pk(~ltkA)) //Make publicly available the pk (output to the public/network)
    ]

/*Rule that models the sending of request to the MUD File Server */
rule M_Send_Request:
    [ !Ltk(M, ltkM), !Pk(S, pkS), Fr(request_url) ] // Include request_url as a fresh term
    --[ Send(M, request_url) ]-> // Event that indicates M has sent a message with the request URL
    [ Out(request_url) ] // Output the request_url

/*Rule that models the checking if the MUD File Server has the MUD File requested */
rule S_Process_Request:
    [ !Ltk(S, ltkS), !Pk(M, pkM), In(request_url), Fr(mud_file) ] // Declare mud_file as a fresh term
    --[ Recv(S, request_url) ]-> // Event that indicates S has received the request from M
    [ Out(<mud_file, sign(mud_file, ltkS)>) ] // Send the MUD File content signed using the ltkS

/*Rule that models the verification of the signed MUD File from the MUD Manager */
rule M_Verify_Response:
    [ !Ltk(M, ltkM), !Pk(S, pkS), In(<mud_file, sig>) ]
    --[ Recv(M, mud_file), Eq(verify(sig, mud_file, pkS), true), Honest(M), Honest(S), Authentic(S, mud_file) ]-> // The verification MUST succeed
    [ St_FileVerified(S, mud_file) ] // The verification has succeeded and the mud_file is authentic

/*Rule that models the compromise of an agent's sk */
rule Reveal_ltk:
    [ !Ltk(A, ltkA) ] 
    --[ Reveal(A) ]-> 
    [ Out(ltkA) ]

restriction Equality:
    "All x y #i. Eq(x,y) @i ==> x = y" // Enforcing correctness in verification

/*Lemma that demonstrates the protocol can execute the communication */
lemma executable:
    exists-trace
    "Ex M S request_url mud_file #i #j #k. 
        ((Send(M, request_url) @ #i) & 
        (Recv(S, request_url) @ #j)) & 
        (Recv(M, mud_file) @ #k)"

lemma message_authentication:
    "All b m #i. Authentic(b,m) @i
        ==> (Ex #j. Send(b,m) @j & j<i)
            | (Ex B #r. Reveal(B)@r & Honest(B) @i & r < i)"
end

//TODO: START FROM THE SCRIPT IN THE MUD file for the non_forgery part